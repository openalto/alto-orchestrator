#!/usr/bin/env python3
import argparse
import sys

import falcon
import gunicorn.app.base
from gunicorn.six import iteritems

from alto.unicorn import set_route


def parse_argument():
    parser = argparse.ArgumentParser(description='ALTO Orchestrator Service.')
    parser.add_argument('-c', '--config', dest='config',
                        type=argparse.FileType('r'),
                        help='Specify the json format configuration file')
    parser.add_argument('-a', '--address', dest='address',
                        default='127.0.0.1')
    parser.add_argument('-p', '--port', dest='port',
                        default='6666', type=int,
                        help='TCP port the service will listen on (default: 6666).')
    parser.add_argument('-v', '--verbose', action='store_true',
                        help='Enable verbosity to trace import statements')
    return parser


class OrchestratorService(gunicorn.app.base.BaseApplication):
    def __init__(self, app, options=None):
        self.options = options or {}
        self.application = app
        super(OrchestratorService, self).__init__()

    def load_config(self):
        config = dict([(key, value) for key, value in iteritems(self.options)
                       if key in self.cfg.settings and value is not None])
        for key, value in iteritems(config):
            self.cfg.set(key.lower(), value)

    def load(self):
        return self.application


def main():
    parser = parse_argument()
    config = parser.parse_args(sys.argv[1:])
    options = {
        'bind': '%s:%d' % (config.address, config.port)
    }
    app = falcon.API()
    set_route(app, vars(config))
    OrchestratorService(app, options).run()


if __name__ == '__main__':
    main()
